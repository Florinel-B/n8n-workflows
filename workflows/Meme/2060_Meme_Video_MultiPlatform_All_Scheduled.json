{
  "name": "Meme Video - Multi-Platform (Instagram + YouTube Shorts + TikTok)",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "hoursInterval": 8
            }
          ]
        }
      },
      "id": "schedule-trigger",
      "name": "Schedule Every 8 Hours",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [200, 400],
      "notes": "3 video posts per day to all platforms"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Enhanced video concepts for multi-platform\nconst concepts = [\n  {\n    topic: 'ai_revolution',\n    prompt: 'Cinematic shot: Developer at desk typing code, camera slowly zooms out revealing AI assistant writing perfect code on adjacent screen. Text overlay fades in: \"THE FUTURE IS NOW\". Professional lighting, 4K quality.',\n    title: 'AI is Changing How We Code',\n    description: 'Watch how AI transforms programming!',\n    tags: ['ai', 'coding', 'technology', 'programming', 'automation'],\n    veo_style: 'cinematic',\n    duration: 10\n  },\n  {\n    topic: 'coffee_power',\n    prompt: 'Dramatic transformation scene: Tired person in dark room holding coffee cup. As they drink, warm golden light floods the scene, person becomes energized and glowing. Epic orchestral swell. Text: \"JAVA POWER LEVEL: 9000\"',\n    title: 'Coffee: The Ultimate Power-Up',\n    description: 'Every developer needs this! â˜•',\n    tags: ['coffee', 'productivity', 'energy', 'developer', 'lifestyle'],\n    veo_style: 'dramatic',\n    duration: 8\n  },\n  {\n    topic: 'remote_work_reality',\n    prompt: 'Split screen reveal: Top half shows professional home office setup during Zoom call. Camera pans down to reveal messy bedroom, person in pajamas, cat walking across keyboard. Comedy timing. Text: \"EXPECTATIONS VS REALITY\"',\n    title: 'Remote Work Reality Check',\n    description: 'This is too real! ðŸ˜‚',\n    tags: ['remotework', 'wfh', 'workfromhome', 'relatable', 'comedy'],\n    veo_style: 'comedic',\n    duration: 10\n  },\n  {\n    topic: 'monday_morning',\n    prompt: 'Time-lapse sequence: Weekend fun montage with vibrant colors and upbeat music, suddenly cuts to dark monday morning, alarm clock ringing, person dramatically rolls over in bed. Text: \"EVERY. SINGLE. MONDAY.\"',\n    title: 'Monday Morning Struggle',\n    description: 'Who else feels this? ðŸ˜´',\n    tags: ['monday', 'weekend', 'work', 'relatable', 'motivation'],\n    veo_style: 'cinematic',\n    duration: 12\n  }\n];\n\nconst selected = concepts[Math.floor(Math.random() * concepts.length)];\n\nconst veoPrompt = `${selected.prompt}\\n\\nStyle: ${selected.veo_style}. Camera: smooth movements. Lighting: professional. Quality: 1080p. Aspect ratio: 9:16 vertical for social media.`;\n\n// Platform-specific formatting\nconst instagramCaption = `${selected.description}\\n\\n#${selected.tags.join(' #')} #viral #reels`;\nconst youtubeTitle = `${selected.title} #Shorts`;\nconst youtubeDescription = `${selected.description}\\n\\n${selected.tags.map(t => '#' + t).join(' ')}\\n\\nSubscribe for more!`;\nconst tiktokCaption = `${selected.description} ${selected.tags.map(t => '#' + t).join(' ')}`;\n\nreturn {\n  topic: selected.topic,\n  video_prompt: selected.prompt,\n  veo_prompt: veoPrompt,\n  style: selected.veo_style,\n  duration: selected.duration,\n  // Platform-specific data\n  instagram_caption: instagramCaption,\n  youtube_title: youtubeTitle,\n  youtube_description: youtubeDescription,\n  youtube_tags: selected.tags,\n  tiktok_caption: tiktokCaption,\n  preferred_api: 'veo2'\n};"
      },
      "id": "generate-concept",
      "name": "Generate Multi-Platform Content",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [400, 400],
      "notes": "Content optimized for Instagram, YouTube Shorts, and TikTok"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": false
          },
          "conditions": [
            {
              "id": "api-check",
              "leftValue": "={{ $json.preferred_api }}",
              "rightValue": "veo",
              "operator": {
                "type": "string",
                "operation": "startsWith"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "route-api",
      "name": "Route to Video API",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [600, 400]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://{{ $env.GOOGLE_CLOUD_REGION || 'us-central1' }}-aiplatform.googleapis.com/v1/projects/{{ $env.GOOGLE_CLOUD_PROJECT }}/locations/{{ $env.GOOGLE_CLOUD_REGION || 'us-central1' }}/publishers/google/models/veo-002:predict",
        "authentication": "genericCredentialType",
        "genericAuthType": "oAuth2Api",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "instances",
              "value": "={{ JSON.stringify([{ prompt: $json.veo_prompt, parameters: { aspectRatio: '9:16', durationSeconds: $json.duration } }]) }}"
            }
          ]
        },
        "options": {
          "timeout": 30000
        }
      },
      "id": "create-video-veo",
      "name": "Create Video (Veo 2/Replicate)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [800, 300],
      "notes": "Generate video with Google Veo 2 or fallback to Replicate"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.replicate.com/v1/predictions",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Token {{ $env.REPLICATE_API_TOKEN }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "version",
              "value": "3d2a62f9bcc9d32c63e8263bfa3cd790e1f42b9d9f55617d59a1e16f00fb2ea2"
            },
            {
              "name": "input",
              "value": "={{ JSON.stringify({ prompt: $json.video_prompt, num_frames: $json.duration * 5, fps: 5 }) }}"
            }
          ]
        },
        "options": {
          "timeout": 20000
        }
      },
      "id": "create-video-replicate",
      "name": "Fallback: Replicate",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [800, 500]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const input = $input.item.json;\nlet videoUrl = '';\nlet apiUsed = 'unknown';\n\nif (input.predictions && input.predictions.length > 0) {\n  videoUrl = input.predictions[0].videoUri || input.predictions[0].url;\n  apiUsed = 'veo';\n} else if (input.output) {\n  videoUrl = Array.isArray(input.output) ? input.output[0] : input.output;\n  apiUsed = 'replicate';\n} else if (input.id) {\n  return {\n    prediction_id: input.id,\n    prediction_url: input.urls?.get,\n    status: 'processing',\n    api_used: 'replicate'\n  };\n}\n\nreturn {\n  video_url: videoUrl,\n  api_used: apiUsed,\n  status: 'completed'\n};"
      },
      "id": "process-response",
      "name": "Process Video Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1000, 400]
    },
    {
      "parameters": {
        "conditions": {
          "options": {},
          "conditions": [
            {
              "id": "status-check",
              "leftValue": "={{ $json.status }}",
              "rightValue": "completed",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ]
        },
        "options": {}
      },
      "id": "check-ready",
      "name": "Video Ready?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1200, 400]
    },
    {
      "parameters": {
        "amount": 10,
        "unit": "seconds"
      },
      "id": "wait-async",
      "name": "Wait for Async",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [1200, 600],
      "webhookId": "video-wait"
    },
    {
      "parameters": {
        "method": "GET",
        "url": "={{ $('Process Video Response').item.json.prediction_url }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Token {{ $env.REPLICATE_API_TOKEN }}"
            }
          ]
        }
      },
      "id": "check-status",
      "name": "Check Status",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1400, 600]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "video-url",
              "name": "video_url",
              "value": "={{ $json.video_url || $json.output?.[0] }}",
              "type": "string"
            }
          ]
        }
      },
      "id": "prepare-video",
      "name": "Prepare Video URL",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [1600, 400]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://graph.facebook.com/v18.0/{{ $env.INSTAGRAM_USER_ID }}/media",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "video_url",
              "value": "={{ $json.video_url }}"
            },
            {
              "name": "caption",
              "value": "={{ $('Generate Multi-Platform Content').item.json.instagram_caption }}"
            },
            {
              "name": "media_type",
              "value": "REELS"
            },
            {
              "name": "access_token",
              "value": "={{ $env.INSTAGRAM_ACCESS_TOKEN }}"
            }
          ]
        },
        "options": {
          "timeout": 15000
        }
      },
      "id": "instagram-create",
      "name": "Instagram: Create Reel",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1800, 200]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://graph.facebook.com/v18.0/{{ $env.INSTAGRAM_USER_ID }}/media_publish",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "creation_id",
              "value": "={{ $json.id }}"
            },
            {
              "name": "access_token",
              "value": "={{ $env.INSTAGRAM_ACCESS_TOKEN }}"
            }
          ]
        }
      },
      "id": "instagram-publish",
      "name": "Instagram: Publish",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [2000, 200]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://www.googleapis.com/upload/youtube/v3/videos?part=snippet,status",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "youTubeOAuth2Api",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "snippet",
              "value": "={{ JSON.stringify({ title: $('Generate Multi-Platform Content').item.json.youtube_title, description: $('Generate Multi-Platform Content').item.json.youtube_description, tags: $('Generate Multi-Platform Content').item.json.youtube_tags, categoryId: '23' }) }}"
            },
            {
              "name": "status",
              "value": "={{ JSON.stringify({ privacyStatus: 'public', selfDeclaredMadeForKids: false }) }}"
            },
            {
              "name": "video_url",
              "value": "={{ $('Prepare Video URL').item.json.video_url }}"
            }
          ]
        },
        "options": {
          "timeout": 30000
        }
      },
      "id": "youtube-upload",
      "name": "YouTube: Upload Short",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1800, 400],
      "notes": "Uploads to YouTube - Shorts auto-detected for vertical videos <60s"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://open.tiktokapis.com/v2/post/publish/video/init/",
        "authentication": "genericCredentialType",
        "genericAuthType": "oAuth2Api",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "post_info",
              "value": "={{ JSON.stringify({ title: $('Generate Multi-Platform Content').item.json.tiktok_caption, privacy_level: 'PUBLIC_TO_EVERYONE', disable_duet: false, disable_comment: false, disable_stitch: false }) }}"
            },
            {
              "name": "source_info",
              "value": "={{ JSON.stringify({ source: 'FILE_UPLOAD', video_url: $('Prepare Video URL').item.json.video_url }) }}"
            }
          ]
        },
        "options": {
          "timeout": 30000
        }
      },
      "id": "tiktok-init",
      "name": "TikTok: Initialize Upload",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1800, 600],
      "notes": "TikTok API - requires developer account approval"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://open.tiktokapis.com/v2/post/publish/status/fetch/",
        "authentication": "genericCredentialType",
        "genericAuthType": "oAuth2Api",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "publish_id",
              "value": "={{ $json.data.publish_id }}"
            }
          ]
        }
      },
      "id": "tiktok-confirm",
      "name": "TikTok: Confirm Publish",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [2000, 600]
    },
    {
      "parameters": {
        "operation": "insert",
        "schema": {
          "__rl": true,
          "value": "public",
          "mode": "list"
        },
        "table": {
          "__rl": true,
          "value": "meme_videos_multiplatform",
          "mode": "list"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "topic": "={{ $('Generate Multi-Platform Content').item.json.topic }}",
            "video_prompt": "={{ $('Generate Multi-Platform Content').item.json.veo_prompt }}",
            "video_url": "={{ $('Prepare Video URL').item.json.video_url }}",
            "instagram_id": "={{ $('Instagram: Publish').item.json.id }}",
            "youtube_id": "={{ $('YouTube: Upload Short').item.json.id }}",
            "tiktok_id": "={{ $('TikTok: Confirm Publish').item.json.data?.video_id }}",
            "api_provider": "={{ $('Process Video Response').item.json.api_used }}",
            "success": true
          },
          "matchingColumns": [],
          "schema": []
        }
      },
      "id": "save-db",
      "name": "Save to PostgreSQL",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [2200, 400],
      "credentials": {
        "postgres": {
          "id": "postgres_default",
          "name": "PostgreSQL account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "success",
              "name": "success",
              "value": true,
              "type": "boolean"
            },
            {
              "id": "message",
              "name": "message",
              "value": "=Posted to Instagram, YouTube Shorts, and TikTok: {{ $('Generate Multi-Platform Content').item.json.topic }}",
              "type": "string"
            },
            {
              "id": "platforms",
              "name": "platforms_posted",
              "value": "={{ JSON.stringify({ instagram: $('Instagram: Publish').item.json.id, youtube: $('YouTube: Upload Short').item.json.id, tiktok: $('TikTok: Confirm Publish').item.json.data?.video_id }) }}",
              "type": "string"
            }
          ]
        }
      },
      "id": "success-summary",
      "name": "Multi-Platform Success",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [2400, 400]
    },
    {
      "parameters": {
        "content": "## ðŸš€ Multi-Platform Publishing\n\n**This workflow posts to:**\n1. Instagram Reels\n2. YouTube Shorts\n3. TikTok\n\n**Why Multi-Platform:**\n- Maximize reach\n- Diversify audience\n- Same video, 3x exposure\n- Algorithm advantages\n\n**Eco Dyno Safe:**\n- No file downloads\n- All external uploads\n- URLs only\n- Memory < 150MB\n- Execution < 60s\n\n**Setup Required:**\n- Instagram: Graph API\n- YouTube: OAuth2 + Data API v3\n- TikTok: Developer account\n\nSee documentation for setup!",
        "height": 478.4,
        "width": 345.6,
        "color": 4
      },
      "id": "multiplatform-note",
      "name": "Note: Multi-Platform",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [180, 60]
    }
  ],
  "connections": {
    "Schedule Every 8 Hours": {
      "main": [
        [
          {
            "node": "Generate Multi-Platform Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Multi-Platform Content": {
      "main": [
        [
          {
            "node": "Route to Video API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route to Video API": {
      "main": [
        [
          {
            "node": "Create Video (Veo 2/Replicate)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Fallback: Replicate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Video (Veo 2/Replicate)": {
      "main": [
        [
          {
            "node": "Process Video Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fallback: Replicate": {
      "main": [
        [
          {
            "node": "Process Video Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Video Response": {
      "main": [
        [
          {
            "node": "Video Ready?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Video Ready?": {
      "main": [
        [
          {
            "node": "Prepare Video URL",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait for Async",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait for Async": {
      "main": [
        [
          {
            "node": "Check Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Status": {
      "main": [
        [
          {
            "node": "Process Video Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Video URL": {
      "main": [
        [
          {
            "node": "Instagram: Create Reel",
            "type": "main",
            "index": 0
          },
          {
            "node": "YouTube: Upload Short",
            "type": "main",
            "index": 0
          },
          {
            "node": "TikTok: Initialize Upload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Instagram: Create Reel": {
      "main": [
        [
          {
            "node": "Instagram: Publish",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Instagram: Publish": {
      "main": [
        [
          {
            "node": "Save to PostgreSQL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "YouTube: Upload Short": {
      "main": [
        [
          {
            "node": "Save to PostgreSQL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "TikTok: Initialize Upload": {
      "main": [
        [
          {
            "node": "TikTok: Confirm Publish",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "TikTok: Confirm Publish": {
      "main": [
        [
          {
            "node": "Save to PostgreSQL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save to PostgreSQL": {
      "main": [
        [
          {
            "node": "Multi-Platform Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": false
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-10-30T18:15:00.000Z",
      "updatedAt": "2025-10-30T18:15:00.000Z",
      "id": "multi-platform",
      "name": "Multi-Platform"
    },
    {
      "createdAt": "2025-10-30T18:15:00.000Z",
      "updatedAt": "2025-10-30T18:15:00.000Z",
      "id": "youtube-shorts",
      "name": "YouTube Shorts"
    },
    {
      "createdAt": "2025-10-30T18:15:00.000Z",
      "updatedAt": "2025-10-30T18:15:00.000Z",
      "id": "tiktok",
      "name": "TikTok"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2025-10-30T18:15:00.000Z",
  "versionId": "1",
  "active": false
}
