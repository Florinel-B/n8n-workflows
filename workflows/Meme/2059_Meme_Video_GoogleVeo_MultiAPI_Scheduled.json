{
  "name": "Meme Video - Google Veo 2/3 + Multi-API Support",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "hoursInterval": 8
            }
          ]
        }
      },
      "id": "schedule-trigger",
      "name": "Schedule Every 8 Hours",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [200, 400],
      "notes": "3 video posts per day"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Enhanced video meme concepts optimized for Veo 2/3\nconst concepts = [\n  {\n    topic: 'ai_revolution',\n    prompt: 'Cinematic shot: Developer at desk typing code, camera slowly zooms out revealing AI assistant writing perfect code on adjacent screen. Text overlay fades in: \"THE FUTURE IS NOW\". Professional lighting, 4K quality.',\n    veo_style: 'cinematic',\n    duration: 8\n  },\n  {\n    topic: 'coffee_power',\n    prompt: 'Dramatic transformation scene: Tired person in dark room holding coffee cup. As they drink, warm golden light floods the scene, person becomes energized and glowing. Epic orchestral swell. Text: \"JAVA POWER LEVEL: 9000\"',\n    veo_style: 'dramatic',\n    duration: 8\n  },\n  {\n    topic: 'remote_work_reality',\n    prompt: 'Split screen reveal: Top half shows professional home office setup during Zoom call. Camera pans down to reveal messy bedroom, person in pajamas, cat walking across keyboard. Comedy timing. Text: \"EXPECTATIONS VS REALITY\"',\n    veo_style: 'comedic',\n    duration: 10\n  },\n  {\n    topic: 'monday_morning',\n    prompt: 'Time-lapse sequence: Weekend fun montage with vibrant colors and upbeat music, suddenly cuts to dark monday morning, alarm clock ringing, person dramatically rolls over in bed. Cinematic color grading. Text: \"EVERY. SINGLE. MONDAY.\"',\n    veo_style: 'cinematic',\n    duration: 12\n  },\n  {\n    topic: 'debugging_journey',\n    prompt: 'Intense thriller-style sequence: Developer frantically scrolling through code, multiple monitors, dramatic lighting. Sudden stop, zooms into missing semicolon. Relief expression. Comic timing. Text overlay: \"3 HOURS LATER... FOUND IT\"',\n    veo_style: 'thriller',\n    duration: 10\n  },\n  {\n    topic: 'deploy_friday',\n    prompt: 'Dramatic action sequence: Hand hovering over \"Deploy\" button, intense close-up, finger presses. Quick cuts to servers, progress bars, then red alerts flashing. Camera shakes, alarms. Text: \"NEVER DEPLOY ON FRIDAY\"',\n    veo_style: 'action',\n    duration: 10\n  },\n  {\n    topic: 'meeting_multitask',\n    prompt: 'Clever split-screen: Professional person nodding seriously in video meeting on left. Right side shows them gaming intensely. Quick cuts between serious face and excited gaming expressions. Text: \"CAMERA OFF MODE ACTIVATED\"',\n    veo_style: 'comedic',\n    duration: 8\n  },\n  {\n    topic: 'productivity_decline',\n    prompt: 'Stylized time-lapse: Person starts day at desk super focused, laptop open. Gradually phone appears, then snacks, then scrolling social media, ending with feet on desk watching videos. Satirical tone. Text: \"THE PRODUCTIVITY SPIRAL\"',\n    veo_style: 'satirical',\n    duration: 12\n  }\n];\n\nconst selected = concepts[Math.floor(Math.random() * concepts.length)];\n\n// Veo-optimized prompt structure\nconst veoPrompt = `${selected.prompt}\\n\\nStyle: ${selected.veo_style}. Camera: smooth movements. Lighting: professional. Quality: 1080p. Aspect ratio: 9:16 vertical for social media.`;\n\nreturn {\n  topic: selected.topic,\n  video_prompt: selected.prompt,\n  veo_prompt: veoPrompt,\n  style: selected.veo_style,\n  duration: selected.duration,\n  hashtags: `#${selected.topic.replace('_', '')} #meme #viral #shorts #reels #aivideo`,\n  preferred_api: 'veo2' // Can be: veo2, veo3, replicate, runway\n};"
      },
      "id": "generate-concept",
      "name": "Generate Video Concept",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [400, 400],
      "notes": "8 high-quality video concepts optimized for Veo 2/3"
    },
    {
      "parameters": {
        "content": "## ðŸŽ¬ Google Veo 2/3 Integration\n\n**Your Setup:**\n- Google Pro account âœ…\n- Access to Vertex AI\n- Veo 2: Available now\n- Veo 3: Check availability\n\n**Authentication:**\n- Service Account JSON\n- Project ID required\n- Vertex AI API enabled\n\n**Endpoints:**\n- Veo 2: aiplatform.googleapis.com\n- Region: us-central1\n- Model: veo-002 or veo-003\n\n**Advantages:**\n- Highest quality videos\n- Best prompt understanding\n- Cinematic results\n- 1080p output\n- Vertical (9:16) support\n\n**Cost (Estimate):**\n- Per video: ~$0.20-0.50\n- With Google Pro: May have credits\n- Still cheaper than manual creation!",
        "height": 518.4,
        "width": 345.6,
        "color": 4
      },
      "id": "veo-note",
      "name": "Note: Google Veo Setup",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [580, 60]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": false
          },
          "conditions": [
            {
              "id": "api-check",
              "leftValue": "={{ $json.preferred_api }}",
              "rightValue": "veo",
              "operator": {
                "type": "string",
                "operation": "startsWith"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "route-api",
      "name": "Route to API",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [600, 400],
      "notes": "Choose between Veo or alternative APIs"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://{{ $env.GOOGLE_CLOUD_REGION || 'us-central1' }}-aiplatform.googleapis.com/v1/projects/{{ $env.GOOGLE_CLOUD_PROJECT }}/locations/{{ $env.GOOGLE_CLOUD_REGION || 'us-central1' }}/publishers/google/models/veo-002:predict",
        "authentication": "genericCredentialType",
        "genericAuthType": "oAuth2Api",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "instances",
              "value": "={{ JSON.stringify([{ prompt: $json.veo_prompt, parameters: { aspectRatio: '9:16', durationSeconds: $json.duration } }]) }}"
            }
          ]
        },
        "options": {
          "timeout": 30000
        }
      },
      "id": "create-video-veo2",
      "name": "Create Video (Google Veo 2)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [800, 300],
      "notes": "Google Veo 2 - High quality, cinematic results"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://{{ $env.GOOGLE_CLOUD_REGION || 'us-central1' }}-aiplatform.googleapis.com/v1/projects/{{ $env.GOOGLE_CLOUD_PROJECT }}/locations/{{ $env.GOOGLE_CLOUD_REGION || 'us-central1' }}/publishers/google/models/veo-003:predict",
        "authentication": "genericCredentialType",
        "genericAuthType": "oAuth2Api",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "instances",
              "value": "={{ JSON.stringify([{ prompt: $json.veo_prompt, parameters: { aspectRatio: '9:16', durationSeconds: $json.duration, quality: 'high' } }]) }}"
            }
          ]
        },
        "options": {
          "timeout": 30000
        }
      },
      "id": "create-video-veo3",
      "name": "Create Video (Google Veo 3)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [800, 200],
      "notes": "Google Veo 3 - Latest model, best quality (if available)"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.replicate.com/v1/predictions",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Token {{ $env.REPLICATE_API_TOKEN }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "version",
              "value": "3d2a62f9bcc9d32c63e8263bfa3cd790e1f42b9d9f55617d59a1e16f00fb2ea2"
            },
            {
              "name": "input",
              "value": "={{ JSON.stringify({ prompt: $json.video_prompt, num_frames: $json.duration * 5, fps: 5 }) }}"
            }
          ]
        },
        "options": {
          "timeout": 20000
        }
      },
      "id": "create-video-replicate",
      "name": "Create Video (Replicate Fallback)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [800, 500],
      "notes": "Fallback to Replicate if Veo is not preferred"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Process Veo response\nconst input = $input.item.json;\n\n// Veo returns predictions with video URL\nlet videoUrl = '';\nlet apiUsed = 'unknown';\n\n// Check if it's a Veo response\nif (input.predictions && input.predictions.length > 0) {\n  // Veo 2/3 response format\n  videoUrl = input.predictions[0].videoUri || input.predictions[0].url;\n  apiUsed = 'veo';\n} else if (input.output) {\n  // Replicate response format\n  videoUrl = Array.isArray(input.output) ? input.output[0] : input.output;\n  apiUsed = 'replicate';\n} else if (input.id) {\n  // Async prediction started - need to wait\n  return {\n    prediction_id: input.id,\n    prediction_url: input.urls?.get,\n    status: 'processing',\n    api_used: 'replicate'\n  };\n}\n\nreturn {\n  video_url: videoUrl,\n  api_used: apiUsed,\n  status: 'completed',\n  generation_completed: true\n};"
      },
      "id": "process-veo-response",
      "name": "Process API Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1000, 350],
      "notes": "Handles both Veo and Replicate responses"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": false
          },
          "conditions": [
            {
              "id": "status-check",
              "leftValue": "={{ $json.status }}",
              "rightValue": "completed",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-completion",
      "name": "Video Ready?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1200, 350]
    },
    {
      "parameters": {
        "amount": 10,
        "unit": "seconds"
      },
      "id": "wait-async",
      "name": "Wait for Async Generation",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [1200, 550],
      "webhookId": "veo-async-wait",
      "notes": "Wait for Replicate async generation"
    },
    {
      "parameters": {
        "method": "GET",
        "url": "={{ $('Process API Response').item.json.prediction_url }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Token {{ $env.REPLICATE_API_TOKEN }}"
            }
          ]
        },
        "options": {
          "timeout": 15000
        }
      },
      "id": "check-async-status",
      "name": "Check Async Status",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1400, 550],
      "notes": "Poll Replicate for completion"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "video-url",
              "name": "video_url",
              "value": "={{ $json.video_url || $json.output?.[0] }}",
              "type": "string"
            },
            {
              "id": "caption",
              "name": "caption",
              "value": "={{ $('Generate Video Concept').item.json.video_prompt.split('.')[0] }}\\n\\n{{ $('Generate Video Concept').item.json.hashtags }} #googleai #veo",
              "type": "string"
            },
            {
              "id": "topic",
              "name": "topic",
              "value": "={{ $('Generate Video Concept').item.json.topic }}",
              "type": "string"
            },
            {
              "id": "api-used",
              "name": "api_provider",
              "value": "={{ $('Process API Response').item.json.api_used || 'veo2' }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "prepare-video-data",
      "name": "Prepare Video Data",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [1600, 350],
      "notes": "Prepare for Instagram upload"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://graph.facebook.com/v18.0/{{ $env.INSTAGRAM_USER_ID }}/media",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "video_url",
              "value": "={{ $json.video_url }}"
            },
            {
              "name": "caption",
              "value": "={{ $json.caption }}"
            },
            {
              "name": "media_type",
              "value": "REELS"
            },
            {
              "name": "access_token",
              "value": "={{ $env.INSTAGRAM_ACCESS_TOKEN }}"
            }
          ]
        },
        "options": {
          "timeout": 15000
        }
      },
      "id": "instagram-create-reel",
      "name": "Instagram: Create Reel",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1800, 350]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://graph.facebook.com/v18.0/{{ $env.INSTAGRAM_USER_ID }}/media_publish",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "creation_id",
              "value": "={{ $json.id }}"
            },
            {
              "name": "access_token",
              "value": "={{ $env.INSTAGRAM_ACCESS_TOKEN }}"
            }
          ]
        },
        "options": {
          "timeout": 15000
        }
      },
      "id": "instagram-publish-reel",
      "name": "Instagram: Publish Reel",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [2000, 350]
    },
    {
      "parameters": {
        "operation": "insert",
        "schema": {
          "__rl": true,
          "value": "public",
          "mode": "list"
        },
        "table": {
          "__rl": true,
          "value": "meme_videos",
          "mode": "list"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "topic": "={{ $('Prepare Video Data').item.json.topic }}",
            "video_prompt": "={{ $('Generate Video Concept').item.json.veo_prompt }}",
            "video_url": "={{ $('Prepare Video Data').item.json.video_url }}",
            "instagram_id": "={{ $json.id }}",
            "api_provider": "={{ $('Prepare Video Data').item.json.api_provider }}",
            "success": true
          },
          "matchingColumns": [],
          "schema": []
        },
        "options": {}
      },
      "id": "save-to-postgres",
      "name": "Save to PostgreSQL",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [2200, 350],
      "credentials": {
        "postgres": {
          "id": "postgres_default",
          "name": "PostgreSQL account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "success",
              "name": "success",
              "value": true,
              "type": "boolean"
            },
            {
              "id": "message",
              "name": "message",
              "value": "=Video posted using {{ $('Prepare Video Data').item.json.api_provider }}: {{ $('Generate Video Concept').item.json.topic }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "success-summary",
      "name": "Success Summary",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [2400, 350]
    },
    {
      "parameters": {
        "content": "## ðŸ”€ Multi-API Strategy\n\n**Priority Order:**\n1. Veo 3 (if available)\n2. Veo 2 (recommended)\n3. Replicate (fallback)\n\n**Why This Approach:**\n- Veo: Best quality\n- Replicate: Always available\n- Automatic fallback\n- Cost optimization\n\n**Switching Logic:**\n- Set preferred_api in concept\n- Router checks availability\n- Falls back if needed\n\n**Monitoring:**\n- Track API usage in DB\n- Compare quality/cost\n- Optimize over time",
        "height": 398.4,
        "width": 345.6,
        "color": 5
      },
      "id": "strategy-note",
      "name": "Note: API Strategy",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [960, 60]
    }
  ],
  "connections": {
    "Schedule Every 8 Hours": {
      "main": [
        [
          {
            "node": "Generate Video Concept",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Video Concept": {
      "main": [
        [
          {
            "node": "Route to API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route to API": {
      "main": [
        [
          {
            "node": "Create Video (Google Veo 2)",
            "type": "main",
            "index": 0
          },
          {
            "node": "Create Video (Google Veo 3)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create Video (Replicate Fallback)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Video (Google Veo 2)": {
      "main": [
        [
          {
            "node": "Process API Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Video (Google Veo 3)": {
      "main": [
        [
          {
            "node": "Process API Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Video (Replicate Fallback)": {
      "main": [
        [
          {
            "node": "Process API Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process API Response": {
      "main": [
        [
          {
            "node": "Video Ready?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Video Ready?": {
      "main": [
        [
          {
            "node": "Prepare Video Data",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait for Async Generation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait for Async Generation": {
      "main": [
        [
          {
            "node": "Check Async Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Async Status": {
      "main": [
        [
          {
            "node": "Process API Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Video Data": {
      "main": [
        [
          {
            "node": "Instagram: Create Reel",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Instagram: Create Reel": {
      "main": [
        [
          {
            "node": "Instagram: Publish Reel",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Instagram: Publish Reel": {
      "main": [
        [
          {
            "node": "Save to PostgreSQL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save to PostgreSQL": {
      "main": [
        [
          {
            "node": "Success Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": false
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-10-30T18:10:00.000Z",
      "updatedAt": "2025-10-30T18:10:00.000Z",
      "id": "google-veo",
      "name": "Google Veo"
    },
    {
      "createdAt": "2025-10-30T18:10:00.000Z",
      "updatedAt": "2025-10-30T18:10:00.000Z",
      "id": "multi-api",
      "name": "Multi API"
    },
    {
      "createdAt": "2025-10-30T18:10:00.000Z",
      "updatedAt": "2025-10-30T18:10:00.000Z",
      "id": "production-ready",
      "name": "Production Ready"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2025-10-30T18:10:00.000Z",
  "versionId": "1",
  "active": false
}
